// ================ COPYRIGHT AND INCLUDES ================== {{{1
// Copyright (c) 2021 Bennett Helm
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// }}}
// ====================== SHORTHANDS ======================== {{{1
// These are shorthand references to keep things simple and tidy in the keymap
// below.

// Layer Names: Default, Numbers, Functions, GUI/Misc
#define DEF 0
#define NUM 1
#define NLK 2
#define FUN 3
#define FLK 4
#define GMC 5
#define GLK 6

// WINxxxx defines are for shortcuts with Rectangle.app to manipulate windows
#define WIN_LFT &kp LA(LG(LEFT))
#define WIN_RGT &kp LA(LG(RIGHT))
#define WIN_BIG &kp LC(LA(LG(RIGHT)))
#define WIN_SML &kp LC(LA(LG(LEFT)))
#define WIN_NXT &kp LG(GRAVE)
#define WIN_PRV &kp LS(LG(GRAVE))
#define WIN3LFT &kp LC(LA(LEFT))
#define WIN3RGT &kp LC(LA(RIGHT))
#define WIN_CNT &kp LC(LG(LA(C)))

// // Home Row Mods
// // Dvorak
// #define LSFT_A      &mf LEFT_SHIFT A
// #define LCTL_O      &ms LEFT_CONTROL O
// #define LALT_E      &ms LEFT_ALT E
// #define LGUI_U      &ms LEFT_GUI U
// #define RGUI_H      &ms RIGHT_GUI H
// #define RALT_T      &ms RIGHT_ALT T
// #define RCTL_N      &ms RIGHT_CONTROL N
// #define RSFT_S      &mf RIGHT_SHIFT S
// // Number
// #define LSFT_TAB    &ms LEFT_SHIFT TAB
// #define LCTL_DLLR   &ms LEFT_CONTROL DLLR
// #define LALT_PRCNT  &ms LEFT_ALT PRCNT
// #define LGUI_CARET  &ms LEFT_GUI CARET
// #define RGUI_N4     &ms RIGHT_GUI N4
// #define RALT_N5     &ms RIGHT_ALT N5
// #define RCTL_N6     &ms RIGHT_CONTROL N6
// #define RSFT_MINUS  &ms RIGHT_SHIFT MINUS
// // Function
// #define LCTRL_F4    &ms LCTRL F4
// #define LALT_F5     &ms LALT F5
// #define LGUI_F6     &ms LGUI F6
// #define RGUI_LFT    &ms RGUI LEFT
// #define RALT_DWN    &ms RALT DOWN
// #define RCTRL_RGT   &ms RCTRL RIGHT
// #define RSFT_BRD    &ms RSFT C_BRI_DN

// Bottom Row Mods
// Dvorak
#define LSFT_SC     &mf LEFT_SHIFT SEMICOLON
#define LCTL_Q      &ms LEFT_CONTROL Q
#define LALT_J      &ms LEFT_ALT J
#define LGUI_K      &ms LEFT_GUI K
#define RGUI_M      &ms RIGHT_GUI M
#define RALT_W      &ms RIGHT_ALT W
#define RCTL_V      &ms RIGHT_CONTROL V
#define RSFT_Z      &mf RIGHT_SHIFT Z
// Number
// #define LSFT_TAB    &ms LEFT_SHIFT TAB
#define LCTL_EXCL   &ms LEFT_CONTROL EXCLAMATION
#define LALT_AT     &ms LEFT_ALT AT_SIGN
#define LGUI_HASH   &ms LEFT_GUI HASH
#define RGUI_N1     &ms RIGHT_GUI N1
#define RALT_N2     &ms RIGHT_ALT N2
#define RCTL_N3     &ms RIGHT_CONTROL N3
#define RSFT_DOT    &ms RIGHT_SHIFT DOT
// Function
#define LCTRL_F1    &ms LCTRL F1
#define LALT_F2     &ms LALT F2
#define LGUI_F3     &ms LGUI F3
#define RGUI_END    &ms RGUI END
// #define RALT_DWN    &ms RALT DOWN
#define RCTL_PDN    &ms RCTRL PG_DN
#define RSFT_CAPS   &ms RSFT CAPS

// Other
#define BTLDR &bootloader

// }}}
// ==================== OTHER SETTINGS ====================== {{{1
/* // Set options for mod-tap behavior */
&mt {
    tapping-term-ms = <170>;
    quick-tap-ms = <170>;
    flavor = "tap-preferred";
};
// Set options for layer-tap behavior
&lt {
    tapping-term-ms = <200>; // was 200 -- too fast (without tap-preferred)
    // 200: getting some <spaces> *after* subsequently hit keys.
    // 150 was too quick: failed to get <spaces> when desired
    // 175: getting some missed taps, as well as some arrow keys instead of space-char
    // 250 was pretty wonky: getting too many taps when trying to hold
    /* quick-tap-ms = <200>; */
    flavor = "tap-preferred";
};
/* &kscan0 { */
/*     debounce-press-ms = <0>;    // default is 5 */
/*     debounce-release-ms = <4>;  // default is 5 */
/* }; */
// }}}

/ {
// ======================= BEHAVIORS ======================== {{{1
    behaviors {
        mf: modtap_fast {
            compatible = "zmk,behavior-hold-tap";
            label = "MODTAP_FAST";
            #binding-cells = <2>;
            tapping-term-ms = <170>;  // 160 is too fast
            // 180 might be too slow
            // quick-tap-ms = <250>;
            flavor = "tap-preferred";
            // retro-tap;
            bindings = <&kp>, <&kp>;
        };
        ms: modtap_slow {
            compatible = "zmk,behavior-hold-tap";
            label = "MODTAP_SLOW";
            #binding-cells = <2>;
            tapping-term-ms = <215>;  // 210 is too fast
            // 225 seems pretty good, though I want to push it down somewhat
            // quick-tap-ms = <225>;
            flavor = "tap-preferred";
            // retro-tap;
            bindings = <&kp>, <&kp>;
        };
    };
// }}}

// ========================= COMBOS ========================= {{{1
    combos {
        compatible = "zmk,combos";
        combo_lbrace {
            timeout-ms = <40>;
            key-positions = <1 11>;
            bindings = <&kp LEFT_BRACE>;
            layers = <DEF NUM NLK>;
        };
        combo_esc {
            timeout-ms = <40>;
            key-positions = <2 12>;
            bindings = <&kp ESC>;
            layers = <DEF NUM NLK FUN FLK>;
        };
        combo_asterisk {
            timeout-ms = <40>;
            key-positions = <3 13>;
            bindings = <&kp ASTRK>;
            layers = <DEF NUM NLK>;
        };
        combo_doublequote {
            timeout-ms = <40>;
            key-positions = <6 16>;
            bindings = <&kp DQT>;
            layers = <DEF NUM NLK>;
        };
        combo_return {
            timeout-ms = <40>;
            key-positions = <7 17>;
            bindings = <&kp ENTER>;
            layers = <DEF NUM NLK FUN FLK GMC GLK>;
        };
        combo_rbrace {
            timeout-ms = <40>;
            key-positions = <8 18>;
            bindings = <&kp RIGHT_BRACE>;
            layers = <DEF NUM NLK>;
        };
        combo_lbracket {
            timeout-ms = <40>;
            key-positions = <11 21>;
            bindings = <&kp LEFT_BRACKET>;
            layers = <DEF NUM NLK>;
        };
        combo_tab {
            timeout-ms = <40>;
            key-positions = <12 22>;
            bindings = <&kp TAB>;
            layers = <DEF NUM NLK>;
        };
        combo_lparen {
            timeout-ms = <40>;
            key-positions = <13 23>;
            bindings = <&kp LPAR>;
            layers = <DEF NUM NLK>;
        };
        combo_rparen {
            timeout-ms = <40>;
            key-positions = <16 26>;
            bindings = <&kp RPAR>;
            layers = <DEF NUM NLK>;
        };
        combo_colon {
            timeout-ms = <40>;
            key-positions = <17 27>;
            bindings = <&kp COLON>;
            layers = <DEF NUM NLK>;
        };
        combo_rbracket {
            timeout-ms = <40>;
            key-positions = <18 28>;
            bindings = <&kp RIGHT_BRACKET>;
            layers = <DEF NUM NLK>;
        };
        combo_capslock {
            timeout-ms = <50>;
            key-positions = <20 29>;
            bindings = <&kp CAPS>;
            layers = <DEF NUM NLK FUN FLK>;
        };
        combo_zero {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp N0>;
            layers = <NUM NLK>;
        };
        combo_period {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp DOT>;
            layers = <NUM NLK>;
        };
        combo_BTclr {
            timeout-ms = <30>;
            key-positions = <0 10>;
            bindings = <&bt BT_CLR>;
            layers = <GMC GLK>;
        };
        combo_FUNlayer {
            timeout-ms = <80>;
            key-positions = <31 32>;
            bindings = <&mo FUN>;
            layers = <DEF NUM NLK>;
        };
    };
// }}}

// ======================== KEYMAPS ========================= {{{1
    keymap {
        compatible = "zmk,keymap";
// ----------------------------------------------------- DVORAK ------------------------------------------------- {{{2
        default {
            bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────╮  ╭──────────┬──────────┬──────────┬──────────┬──────────╮
     &kp SQT   &kp COMMA   &kp DOT     &kp P      &kp Y         &kp F      &kp G      &kp C      &kp R      &kp L
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
      &kp A      &kp O      &kp E      &kp U      &kp I         &kp D      &kp H      &kp T      &kp N      &kp S
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
     LSFT_SC     LCTL_Q     LALT_J     LGUI_K     &kp X         &kp B      RGUI_M     RALT_W     RCTL_V     RSFT_Z
// ╰──────────┴──────────┴──────────┴──────────┼──────────┤  ├──────────┴─┬────────┴────┬─────┴──────────┴──────────╯
                                               &lt NUM BSPC     &kp SPACE  &lt GMC FSLH
//                                             ╰──────────╯  ╰────────────┴─────────────╯
            >;
      };  // }}}
//  ---------------------------------------------------- NUMBERS ------------------------------------------------ {{{2
        numbers {
            bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────╮  ╭──────────┬──────────┬──────────┬──────────┬──────────╮
     &tog NLK   &kp AMPS  &kp ASTRK  &kp LA(N6) &kp TILDE      &kp DQT     &kp N7     &kp N8     &kp N9   &kp EQUAL
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
     &kp TAB    &kp DLLR  &kp PRCNT   &kp CARET &kp GRAVE     &kp COLON    &kp N4     &kp N5     &kp N6   &kp MINUS
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp LSHIFT LCTL_EXCL   LALT_AT   LGUI_HASH  &kp LA(K)       &kp N0    RGUI_N1    RALT_N2     RCTL_N3   RSFT_DOT
// ╰──────────┴──────────┴──────────┴──────────┼──────────┤  ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                                  &trans        &trans    &kp BSLH
//                                             ╰──────────╯  ╰──────────┴──────────╯
            >;
      };  // }}}
//  ------------------------------------------------- NUMBERS LOCK ---------------------------------------------- {{{2
// NOTE: This is exactly the same as NUMBERS
        numbers_lock {
            bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────╮  ╭──────────┬──────────┬──────────┬──────────┬──────────╮
     &tog NLK   &kp AMPS  &kp ASTRK  &kp LA(N6) &kp TILDE      &kp DQT     &kp N7     &kp N8     &kp N9   &kp EQUAL
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
     &kp TAB    &kp DLLR  &kp PRCNT   &kp CARET &kp GRAVE     &kp COLON    &kp N4     &kp N5     &kp N6   &kp MINUS
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp LSHIFT LCTL_EXCL   LALT_AT   LGUI_HASH  &kp LA(K)       &kp N0    RGUI_N1    RALT_N2    RCTL_N3    RSFT_DOT
// ╰──────────┴──────────┴──────────┴──────────┼──────────┤  ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                                  &trans        &trans    &kp BSLH
//                                             ╰──────────╯  ╰──────────┴──────────╯
            >;
      };  // }}}
// ---------------------------------------------------- FUNCTIONS ----------------------------------------------- {{{2
        functions {
            bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────╮  ╭──────────┬──────────┬──────────┬──────────┬──────────╮
     &tog FLK   &kp F7     &kp F8     &kp F9     &kp F12     &kp C_VOL_UP &kp HOME   &kp UP    &kp PG_UP &kp C_BRI_UP
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
     &kp TAB    &kp F4     &kp F5     &kp F6     &kp F11     &kp C_VOL_DN &kp LEFT   &kp DOWN  &kp RIGHT &kp C_BRI_DN
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp LSHIFT  LCTRL_F1   LALT_F2    LGUI_F3    &kp F10      &kp C_MUTE  RGUI_END   &kp RALT   RCTL_PDN  RSFT_CAPS
// ╰──────────┴──────────┴──────────┴──────────┼──────────┤  ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                                 &trans        &trans     &trans
//                                             ╰──────────╯  ╰──────────┴──────────╯
            >;
      };  // }}}
// ------------------------------------------------- FUNCTIONS LOCK --------------------------------------------- {{{2
// NOTE: This is exactly the same as FUNCTIONS
        functions_lock {
            bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────╮  ╭──────────┬──────────┬──────────┬──────────┬──────────╮
     &tog FLK   &kp F7     &kp F8     &kp F9     &kp F12     &kp C_VOL_UP &kp HOME   &kp UP    &kp PG_UP &kp C_BRI_UP
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
     &kp TAB    &kp F4     &kp F5     &kp F5     &kp F11     &kp C_VOL_DN &kp LEFT   &kp DOWN  &kp RIGHT &kp C_BRI_DN
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
   &kp LSHIFT   LCTRL_F1   LALT_F2    LGUI_F3    &kp F10      &kp C_MUTE  RGUI_END   &kp RALT   RCTL_PDN  RSFT_CAPS
// ╰──────────┴──────────┴──────────┴──────────┼──────────┤  ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                                 &trans        &trans     &trans
//                                             ╰──────────╯  ╰──────────┴──────────╯
            >;
      };  // }}}
// ---------------------------------------------------- GUI/MISC ------------------------------------------------ {{{2
// |BT<>USB|       |  M Up | Whl Up|  Accl2|     |   F3  | PrvWin| WinBig| NxtWin| BT #1 |
// |       |  M Lft|  M Dn |  M Rgt|  Accl1|     | Sft-F3|  Win3L|  WinSm|  Win3R| BT #2 |
// |  SHFT |  CTRL |       | Whl Dn|  Accl0|     | Cmd-F3| WinLft| WinCen| WinRgt| BT #3 |
//                                 | LftBtn|     | RgtBtn|  ---- |
//
        gui_misc {
            bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────╮  ╭──────────┬──────────┬──────────┬──────────┬──────────╮
     &tog GLK    &none      &none      &none      &none         &kp F3    WIN_PRV    WIN_BIG    WIN_NXT  &bt BT_SEL 0
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
   &out OUT_TOG  &none      &none      &none      &none       &kp LS(F3)  WIN3LFT    WIN_SML    WIN3RGT  &bt BT_SEL 1
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp LSHIFT  &kp LCTRL  &kp LALT    &none      &none       &kp LG(F3)  WIN_LFT    WIN_CNT    WIN_RGT  &bt BT_SEL 2
// ╰──────────┴──────────┴──────────┴──────────┼──────────┤  ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                                  &none         &none      &trans
//                                             ╰──────────╯  ╰──────────┴──────────╯
             >;
      };  // }}}
// ------------------------------------------------- GUI/MISC LOCK ---------------------------------------------- {{{2
// |BT<>USB|       |  M Up | Whl Up|  Accl2|     |   F3  | PrvWin| WinBig| NxtWin| BT #1 |
// |       |  M Lft|  M Dn |  M Rgt|  Accl1|     | Sft-F3|  Win3L|  WinSm|  Win3R| BT #2 |
// |  SHFT |  CTRL |       | Whl Dn|  Accl0|     | Cmd-F3| WinLft| WinCen| WinRgt| BT #3 |
//                                 | LftBtn|     | RgtBtn|  ---- |
//
// NOTE: This is exactly the same as GUI/MISC
        gui_misc_lock {
            bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────╮  ╭──────────┬──────────┬──────────┬──────────┬──────────╮
     &tog GLK    &none      &none      &none      &none         &kp F3    WIN_PRV    WIN_BIG    WIN_NXT  &bt BT_SEL 0
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
   &out OUT_TOG  &none      &none      &none      &none       &kp LS(F3)  WIN3LFT    WIN_SML    WIN3RGT  &bt BT_SEL 1
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp LSHIFT  &kp LCTRL  &kp LALT    &none      &none       &kp LG(F3)  WIN_LFT    WIN_CNT    WIN_RGT  &bt BT_SEL 2
// ╰──────────┴──────────┴──────────┴──────────┼──────────┤  ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                                  &none         &none      &trans
//                                             ╰──────────╯  ╰──────────┴──────────╯
             >;
      }; // }}}
  };  // keymap }}}
};

// vim: fdm=marker ft=c
