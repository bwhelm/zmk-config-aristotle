// ================ COPYRIGHT AND INCLUDES ================== {{{1
// Copyright (c) 2021 The ZMK Contributors
//
// SPDX-License-Identifier: MIT
//

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// }}}
// ====================== SHORTHANDS ======================== {{{1
// These are shorthand references to keep things simple and tidy in the keymap
// below.

// Layer Names: Default, Numbers, Functions, GUI/Misc
#define DEF 0
#define NUM 1
#define FUN 2
#define GUIMISC 3

// WINxxxx defines are for shortcuts with Rectangle.app to manipulate windows
#define WIN_LFT &kp LA(LG(LEFT))
#define WIN_RGT &kp LA(LG(RIGHT))
#define WIN_BIG &kp LC(LA(LG(RIGHT)))
#define WIN_SML &kp LC(LA(LG(LEFT)))
#define WIN_NXT &kp LG(GRAVE)
#define WIN_PRV &kp LS(LG(GRAVE))
#define WIN3LFT &kp LC(LA(LEFT))
#define WIN3RGT &kp LC(LA(RIGHT))
#define WIN_CNT &kp LC(LG(LA(C)))

/* // Bottom Row Mods */
/* #define LSFT_SC &hf LEFT_SHIFT SEMI */
/* #define LCTL_Q  &hs LEFT_CONTROL Q */
/* #define LALT_J  &hs LEFT_ALT J */
/* #define LGUI_K  &hs LEFT_GUI K */
/* #define RGUI_M  &hs RIGHT_GUI M */
/* #define RALT_W  &hs RIGHT_ALT W */
/* #define RCTL_V  &hs RIGHT_CONTROL V */
/* #define RSFT_Z  &hf RIGHT_SHIFT Z */

// Home Row Mods
// Dvorak
#define LSFT_A      &hf LEFT_SHIFT A
#define LCTL_O      &hs LEFT_CONTROL O
#define LALT_E      &hs LEFT_ALT E
#define LGUI_U      &hs LEFT_GUI U
#define RGUI_H      &hs RIGHT_GUI H
#define RALT_T      &hs RIGHT_ALT T
#define RCTL_N      &hs RIGHT_CONTROL N
#define RSFT_S      &hf RIGHT_SHIFT S
// Number
#define LSFT_TAB    &hs LEFT_SHIFT TAB
#define LCTL_DLLR   &hs LEFT_CONTROL DLLR
#define LALT_PRCNT  &hs LEFT_ALT PRCNT
#define LGUI_CARET  &hs LEFT_GUI CARET
#define RGUI_N4     &hs RIGHT_GUI N4
#define RALT_N5     &hs RIGHT_ALT N5
#define RCTL_N6     &hs RIGHT_CONTROL N6
#define RSFT_MINUS  &hs RIGHT_SHIFT MINUS
// Function
#define LCTRL_F4    &hs LCTRL F4
#define LALT_F5     &hs LALT F5
#define LGUI_F5     &hs LGUI F6
#define RGUI_LFT    &hs RGUI LEFT
#define RALT_DWN    &hs RALT DOWN
#define RCTRL_RGT   &hs RCTRL RIGHT
#define RSFT_BRD    &hs RSFT C_BRI_DN

// Other
#define BTLDR &bootloader

// }}}
// ==================== OTHER SETTINGS ====================== {{{1
/* // Set options for mod-tap behavior */
&mt {
    tapping-term-ms = <180>;
    quick-tap-ms = <180>;
};
// Set options for layer-tap behavior
&lt {
    tapping-term-ms = <200>; // was 250
    quick-tap-ms = <200>;
};

// }}}
/ {
// ======================= BEHAVIORS ======================== {{{1
    behaviors {
        hf: homerow_mods_fast {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_FAST";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            /* quick-tap-ms = <250>; */
            flavor = "balanced";
            /* retro-tap; */
            bindings = <&kp>, <&kp>;
        };
        hs: homerow_mods_slow {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_SLOW";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <210>;
            flavor = "tap-preferred";
            /* retro-tap; */
            bindings = <&kp>, <&kp>;
        };
    };
// }}}
// ========================= COMBOS ========================= {{{1
    combos {
        compatible = "zmk,combos";
        /* combo_tab { */
        /*     timeout-ms = <35>; */
        /*     key-positions = <0 1>; */
        /*     bindings = <&kp TAB>; */
        /*     layers = <DEF>; */
        /* }; */
        /* combo_question { */
        /*     timeout-ms = <30>; */
        /*     key-positions = <1 2>; */
        /*     bindings = <&kp QUESTION>; */
        /*     layers = <DEF>; */
        /* }; */
        combo_lbracket {
            timeout-ms = <30>;
            key-positions = <2 3>;
            bindings = <&kp LEFT_BRACKET>;
            layers = <DEF NUM>;
        };
        combo_rbracket {
            timeout-ms = <30>;
            key-positions = <6 7>;
            bindings = <&kp RIGHT_BRACKET>;
            layers = <DEF NUM>;
        };
        /* combo_bs { */
        /*     timeout-ms = <35>; */
        /*     key-positions = <8 9>; */
        /*     bindings = <&kp BACKSPACE>; */
        /*     layers = <DEF NUM>; */
        /* }; */
        /* combo_dquote { */
        /*     timeout-ms = <30>; */
        /*     key-positions = <1 11>; */
        /*     bindings = <&kp DOUBLE_QUOTES>; */
        /*     layers = <DEF NUM>; */
        /* }; */
        /* combo_exclam { */
        /*     timeout-ms = <30>; */
        /*     key-positions = <2 12>; */
        /*     bindings = <&kp EXCLAMATION>; */
        /*     layers = <DEF NUM>; */
        /* }; */
        /* combo_grave { */
        /*     timeout-ms = <30>; */
        /*     key-positions = <3 13>; */
        /*     bindings = <&kp GRAVE>; */
        /*     layers = <DEF>; */
        /* }; */
        /* combo_minus { */
        /*     timeout-ms = <30>; */
        /*     key-positions = <6 16>; */
        /*     bindings = <&kp MINUS>; */
        /*     layers = <DEF NUM>; */
        /* }; */
        /* combo_equal { */
        /*     timeout-ms = <30>; */
        /*     key-positions = <7 17>; */
        /*     bindings = <&kp EQUAL>; */
        /*     layers = <DEF NUM>; */
        /* }; */
        combo_capslock {
            timeout-ms = <30>;
            key-positions = <10 19>;
            bindings = <&kp CAPS>;
            layers = <DEF NUM FUN>;
        };
        combo_esc {
            timeout-ms = <20>;
            key-positions = <11 12>;
            bindings = <&kp ESC>;
            layers = <DEF NUM FUN>;
        };
        combo_lparen {
            timeout-ms = <20>;
            key-positions = <12 13>;
            bindings = <&kp LPAR>;
            layers = <DEF NUM>;
        };
        combo_rparen {
            timeout-ms = <20>;
            key-positions = <16 17>;
            bindings = <&kp RPAR>;
            layers = <DEF NUM>;
        };
        combo_return {
            timeout-ms = <20>;
            key-positions = <17 18>;
            bindings = <&kp ENTER>;
            layers = <DEF NUM FUN GUIMISC>;
        };
        combo_zero {
            timeout-ms = <30>;
            key-positions = <26 27>;
            bindings = <&kp N0>;
            layers = <NUM>;
        };
        combo_period {
            timeout-ms = <30>;
            key-positions = <27 28>;
            bindings = <&kp DOT>;
            layers = <NUM>;
        };
        combo_BTclr {
            timeout-ms = <20>;
            key-positions = <0 10>;
            bindings = <&bt BT_CLR>;
            layers = <GUIMISC>;
        };
    };
// }}}
// ======================== KEYMAPS ========================= {{{1
    keymap {
        compatible = "zmk,keymap";

// --------------------------------------- DVORAK ---------------------------------------- {{{2
// |   '   |   ,   |   .   |   P   |   Y   |     |   F   |   G   |   C   |   R   |   L   |
// | A/SHFT| O/CTL | E/OPT | U/CMD |   I   |     |   D   | H/CMD | T/OPT | N/CTL | S/SHFT|
// |   ;   |   Q   |   J   |   K   |   X   |     |   B   |   M   |   W   |   V   |   Z   |
//                                 | NUM/BS|     | FUN/SP| GUI/ /|
//
  default {
  bindings = <
  &kp SQT  &kp COMMA &kp DOT &kp P  &kp Y       &kp F    &kp G   &kp C   &kp R   &kp L
  LSFT_A   LCTL_O    LALT_E  LGUI_U &kp I       &kp D    RGUI_H  RALT_T  RCTL_N  RSFT_S
  &kp SEMI &kp Q     &kp J   &kp K  &kp X       &kp B    &kp M   &kp W   &kp V   &kp Z
                             &lt NUM BSPC       &lt FUN SPACE &lt GUIMISC FSLH
  >;
  };
// }}}
// --------------------------------------- NUMBERS --------------------------------------- {{{2
// | NUMTog|   &   |   *   |   ยง   |   ~   |     |   "   |   7   |   8   |   9   |   =   |
// |  Tab  |   $   |   %   |   ^   |   `   |     |   :   |   4   |   5   |   6   |   -   |
// |       |   !   |   @   |   #   |   ห   |     |   0   |   1   |   2   |   3   |   .   |
//                                 |  ---- |     |  ---- |   \   |
//
  numbers {
  bindings = <
  &tog NUM &kp AMPS  &kp ASTRK  &kp LA(N6) &kp TILDE   &kp DQT   &kp N7  &kp N8  &kp N9  &kp EQUAL
  LSFT_TAB LCTL_DLLR LALT_PRCNT LGUI_CARET &kp GRAVE   &kp COLON RGUI_N4 RALT_N5 RCTL_N6 RSFT_MINUS
  &none    &kp EXCL  &kp AT     &kp HASH   &kp LA(K)   &kp N0    &kp N1 &kp N2 &kp N3 &kp DOT
                                           &trans      &trans    &kp BSLH
    >;
  };
// }}}
// -------------------------------------- FUNCTIONS -------------------------------------- {{{2
// | FUNTog|   F7  |   F8  |   F9  |   F12 |     |  Vol+ |  Home |   Up  |  PgUp |Bright+|
// |  SHFT | F4/CTL| F5/OPT| F6/CMD|   F11 |     |  Vol- |Lft/CMD|Dwn/OPT|Rgt/CTL|Br-/SFT|
// |       |   F1  |   F2  |   F3  |   F10 |     |  Mute |   End |  ---- |  PgDn | CAPLCK|
//                                 |  ---- |     |  ---- |  ---- |
//
  functions {
  bindings = <
  &tog FUN &kp F7   &kp F8  &kp F9  &kp F12     &kp C_VOL_UP &kp HOME &kp UP   &kp PG_UP &kp C_BRI_UP
  &kp LSFT LCTRL_F4 LALT_F5 LGUI_F5 &kp F11     &kp C_VOL_DN RGUI_LFT RALT_DWN RCTRL_RGT RSFT_BRD
  &none    &kp F1   &kp F2  &kp F3  &kp F10     &kp C_MUTE   &kp END  &none    &kp PG_DN &kp CAPS
                                    &trans      &trans       &trans
  >;
  };
// }}}
// --------------------------------------- GUI/MISC -------------------------------------- {{{2
// |BT<>USB|       |  M Up | Whl Up|  Accl2|     |   F3  | PrvWin| WinBig| NxtWin| BT #1 |
// |       |  M Lft|  M Dn |  M Rgt|  Accl1|     | Sft-F3|  Win3L|  WinSm|  Win3R| BT #2 |
// |  SHFT |  CTRL |       | Whl Dn|  Accl0|     | Cmd-F3| WinLft| WinCen| WinRgt| BT #3 |
//                                 | LftBtn|     | RgtBtn|  ---- |
//
  gui_misc {
  bindings = <
  &out OUT_TOG &none &none &none &none         &kp F3     WIN_PRV WIN_BIG WIN_NXT &bt BT_SEL 0
  &none    &none     &none &none &none         &kp LS(F3) WIN3LFT WIN_SML WIN3RGT &bt BT_SEL 1
  &kp LSFT &kp LCTRL &none &none &none         &kp LG(F3) WIN_LFT WIN_CNT WIN_RGT &bt BT_SEL 2
                                 &none         &none      &trans
    >;
  };
// }}}
  };  // keymap
// }}}
};

// vim: set fdm=marker:
