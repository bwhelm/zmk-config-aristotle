// ================ COPYRIGHT AND INCLUDES ================== {{{1
// Copyright (c) 2022 Bennett Helm
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// }}}
// ====================== SHORTHANDS ======================== {{{1
// These are shorthand references to keep things simple and tidy in the keymap
// below.

// Layer Names: Default, Numbers, Functions, GUI/Misc
#define DEF 0
#define NUM 1
#define NLK 2
#define FUN 3
#define FLK 4
#define GMC 5
#define GLK 6
#define MAC 7


// Home Row Mods
// WINxxxx defines are for shortcuts with Rectangle.app to manipulate windows
#define WIN_PRV &kp LS(LG(GRAVE))
#define WIN_BIG &kp LC(LA(LG(RIGHT)))
#define WIN_NXT &kp LG(GRAVE)
#define CD_WIN3LFT  &ms RIGHT_GUI LC(LA(LEFT))
#define A_WIN_SML   &ms RIGHT_ALT LC(LA(LG(LEFT)))
#define CL_WIN3RGT  &ms RIGHT_CONTROL LC(LA(RIGHT))
/* #define S_BT_SEL1   &ms RIGHT_SHIFT // FIXME: Need to add this! */
#define WIN_LFT &kp LA(LG(LEFT))
#define WIN_CNT &kp LC(LG(LA(C)))
#define WIN_RGT &kp LA(LG(RIGHT))
// Dvorak
#define LSFT_A      &mf LEFT_SHIFT A
#define LCTL_O      &mf LEFT_CONTROL O
#define LALT_E      &ms LEFT_ALT E
#define LGUI_U      &ms LEFT_GUI U
#define RGUI_H      &ms RIGHT_GUI H
#define RALT_T      &ms RIGHT_ALT T
#define RCTL_N      &mf RIGHT_CONTROL N
#define RSFT_S      &mf RIGHT_SHIFT S
// Number
#define LSFT_TILDE  &ms LEFT_SHIFT TILDE
#define LCTL_DLLR   &ms LEFT_CONTROL DLLR
#define LALT_PRCNT  &ms LEFT_ALT PRCNT
#define LGUI_CARET  &ms LEFT_GUI CARET
#define RGUI_N4     &ms RIGHT_GUI N4
#define RALT_N5     &ms RIGHT_ALT N5
#define RCTL_N6     &ms RIGHT_CONTROL N6
#define RSFT_MINUS  &ms RIGHT_SHIFT MINUS
// Function
#define LSFT_AT     &ms LSFT AT
#define LCTRL_F4    &ms LCTRL F4
#define LALT_F5     &ms LALT F5
#define LGUI_F6     &ms LGUI F6
#define RGUI_LFT    &ms RGUI LEFT
#define RALT_DWN    &ms RALT DOWN
#define RCTRL_RGT   &ms RCTRL RIGHT
#define RSFT_BRD    &ms RSFT C_BRI_DN

/* // Bottom Row Mods */
/* // WINxxxx defines are for shortcuts with Rectangle.app to manipulate windows */
/* #define WIN_PRV &kp LS(LG(GRAVE)) */
/* #define WIN_BIG &kp LC(LA(LG(RIGHT))) */
/* #define WIN_NXT &kp LG(GRAVE) */
/* #define WIN3LFT &kp LC(LA(LEFT)) */
/* #define WIN_SML &kp LC(LA(LG(LEFT))) */
/* #define WIN3RGT &kp LC(LA(RIGHT)) */
/* #define CD_WIN_LFT &ms RIGHT_GUI LA(LG(LEFT)) */
/* #define A_WIN_CNT  &ms RIGHT_ALT LC(LG(LA(C))) */
/* #define CL_WIN_RGT &ms RIGHT_CONTROL LA(LG(RIGHT)) */
/* // Dvorak */
/* #define LSFT_BSPC   &mf LEFT_SHIFT BSPC */
/* #define LCTL_Q      &ms LEFT_CONTROL Q */
/* #define LALT_J      &ms LEFT_ALT J */
/* #define LGUI_K      &ms LEFT_GUI K */
/* #define RGUI_M      &ms RIGHT_GUI M */
/* #define RALT_W      &ms RIGHT_ALT W */
/* #define RCTL_V      &ms RIGHT_CONTROL V */
/* #define RSFT_S      &mf RIGHT_SHIFT S */
/* // Number */
/* // #define LSFT_TAB    &ms LEFT_SHIFT TAB */
/* #define LCTL_EXCL   &ms LEFT_CONTROL EXCLAMATION */
/* #define LALT_AT     &ms LEFT_ALT AT_SIGN */
/* #define LGUI_HASH   &ms LEFT_GUI HASH */
/* #define RGUI_N1     &ms RIGHT_GUI N1 */
/* #define RALT_N2     &ms RIGHT_ALT N2 */
/* #define RCTL_N3     &ms RIGHT_CONTROL N3 */
/* // #define RSFT_MINUS  &mf RIGHT_SHIFT MINUS */
/* // Function */
/* #define LCTRL_F1    &ms LCTRL F1 */
/* #define LALT_F2     &ms LALT F2 */
/* #define LGUI_F3     &ms LGUI F3 */
/* #define RGUI_END    &ms RGUI END */
/* // #define RALT_DWN    &ms RALT DOWN */
/* #define RCTL_PDN    &ms RCTRL PG_DN */
/* #define RSFT_BRI_DN &mf RSFT C_BRI_DN */

// Other
/* #define LSFT_SEMI   &mf LEFT_SHIFT SEMI */
#define BTLDR &bootloader
// }}}

// ==================== OTHER SETTINGS ====================== {{{1
// Set options for layer-tap behavior
&lt {
    tapping-term-ms = <220>; // was 200 -- too fast (without tap-preferred)
    // 200: getting some <spaces> *after* subsequently hit keys.
    // 150 was too quick: failed to get <spaces> when desired
    // 175: getting some missed taps, as well as some arrow keys instead of space-char
    // 250 was pretty wonky: getting too many taps when trying to hold
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
};
// }}}

/ {
// ======================= BEHAVIORS ======================== {{{1
    behaviors {
        mf: modtap_fast {
            compatible = "zmk,behavior-hold-tap";
            label = "MODTAP_FAST";
            #binding-cells = <2>;
            tapping-term-ms = <185>;
            // 190: not getting false positives, but sometimes not getting mod I want. Shorter?
            //   (Worry here: I'm sometimes not getting `s` before space. Will shortening it make
            //   that more likely?)
            // 180: Seeing some false positives
            // 185: 
            // Moving CTRL to &mf
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            // retro-tap;
            bindings = <&kp>, <&kp>;
        };
        ms: modtap_slow {
            compatible = "zmk,behavior-hold-tap";
            label = "MODTAP_SLOW";
            #binding-cells = <2>;
            tapping-term-ms = <225>;
            // 230: not getting false positives, but failing sometimes to register when I want them. Shorter?
            // Should I move <CTRL> to &mf? (That might help with false negatives w/230.)
            // 220: Seeing some false positives with <CMD>. 225?
            // 225: 
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            // retro-tap;
            bindings = <&kp>, <&kp>;
        };
        /* The following attempt throws an error. Not sure how to get <Shift> and BT1 on a single key. */
        /* bms: BT_modtap { */
        /*     compatible = "zmk,behavior-hold-tap"; */
        /*     label = "MODTAP_SLOW"; */
        /*     #binding-cells = <2>; */
        /*     tapping-term-ms = <250>; */
        /*     flavor = "tap-preferred"; */
        /*     bindings = <&kp>, <&bt>; */
        /* }; */
        /* lht: left_positional_hold_tap {  // hold left hand key, only apply mod to keys on right */
        /*     compatible = "zmk,behavior-hold-tap"; */
        /*     label = "LEFT_POSITIONAL_HOLD_TAP"; */
        /*     #binding-cells = <2>; */
        /*     flavor = "hold-preferred"; */
        /*     tapping-term-ms = <400>; */
        /*     quick-tap-ms = <200>; */
        /*     bindings = <&kp>, <&kp>; */
        /*     hold-trigger-key-positions = <5>, <6>, <7>, <8>, <9>, <15>, <16>, <17>, <18>, <19>, <24>, <25>, <26>, <27>, <30>, <31>; */
        /* }; */
        /* rht: right_positional_hold_tap {  // hold right hand key, only apply mod to keys on left */
        /*     compatible = "zmk,behavior-hold-tap"; */
        /*     label = "RIGHT_POSITIONAL_HOLD_TAP"; */
        /*     #binding-cells = <2>; */
        /*     flavor = "hold-preferred"; */
        /*     tapping-term-ms = <400>; */
        /*     quick-tap-ms = <200>; */
        /*     bindings = <&kp>, <&kp>; */
        /*     hold-trigger-key-positions = <0>, <1>, <2>, <3>, <4>, <10>, <11>, <12>, <13>, <14>, <20>, <21>, <22>, <23>, <28>, <29>; */
        /* }; */
        tdname: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_NAME";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&firstname>, <&lastname>, <&fullname>;
        };
        tdtextab: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_TAB";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&texfile>, <&tabedit>, <&tabtex>;
        }; 
    };  // }}}

// ========================= COMBOS ========================= {{{1
    combos {
        compatible = "zmk,combos";
        combo_plus3 {
            timeout-ms = <40>;
            key-positions = <6 7 8>;
            bindings = <&kp PLUS>;
            layers = <DEF NUM NLK>;
        };
        combo_minus3 {
            timeout-ms = <40>;
            key-positions = <16 17 18>;
            bindings = <&kp MINUS>;
            layers = <DEF NUM NLK>;
        };
        combo_underscore3 {
            timeout-ms = <40>;
            key-positions = <25 26 27>;
            bindings = <&kp UNDERSCORE>;
            layers = <DEF NUM NLK>;
        };
        combo_lbrace {
            timeout-ms = <40>;
            key-positions = <1 11>;
            bindings = <&kp LEFT_BRACE>;
            layers = <DEF NUM NLK>;
        };
        combo_esc {
            timeout-ms = <40>;
            key-positions = <2 12>;
            bindings = <&kp ESC>;
            layers = <DEF NUM NLK FUN FLK>;
        };
        combo_asterisk {
            timeout-ms = <40>;
            key-positions = <3 13>;
            bindings = <&kp ASTRK>;
            layers = <DEF NUM NLK>;
        };
        combo_doublequote {
            timeout-ms = <40>;
            key-positions = <6 16>;
            bindings = <&kp DQT>;
            layers = <DEF NUM NLK>;
        };
        combo_quoteword {
            timeout-ms = <40>;
            key-positions = <6 16>;
            bindings = <&quoteword>;
            layers = <MAC>;
        };
        combo_equal {
            timeout-ms = <30>;
            key-positions = <7 8>;
            bindings = <&kp EQUAL>;
            layers = <DEF NUM NLK>;
        };
        combo_return {
            timeout-ms = <40>;
            key-positions = <7 17>;
            bindings = <&kp ENTER>;
            layers = <DEF NUM NLK FUN FLK GMC GLK>;
        };
        combo_rbrace {
            timeout-ms = <40>;
            key-positions = <8 18>;
            bindings = <&kp RIGHT_BRACE>;
            layers = <DEF NUM NLK>;
        };
        combo_lbracket {
            timeout-ms = <40>;
            key-positions = <11 20>;
            bindings = <&kp LEFT_BRACKET>;
            layers = <DEF NUM NLK>;
        };
        combo_tab {
            timeout-ms = <40>;
            key-positions = <12 21>;
            bindings = <&kp TAB>;
            layers = <DEF NUM NLK>;
        };
        combo_lparen {
            timeout-ms = <40>;
            key-positions = <13 22>;
            bindings = <&kp LPAR>;
            layers = <DEF NUM NLK>;
        };
        combo_rparen {
            timeout-ms = <40>;
            key-positions = <16 25>;
            bindings = <&kp RPAR>;
            layers = <DEF NUM NLK>;
        };
        combo_colon {
            timeout-ms = <40>;
            key-positions = <17 26>;
            bindings = <&kp COLON>;
            layers = <DEF NUM NLK>;
        };
        combo_rbracket {
            timeout-ms = <40>;
            key-positions = <18 27>;
            bindings = <&kp RIGHT_BRACKET>;
            layers = <DEF NUM NLK>;
        };
        /* combo_capslock { */
        /*     timeout-ms = <50>; */
        /*     key-positions = <10 19>; */
        /*     bindings = <&kp CAPS>; */
        /*     layers = <DEF>; */
        /* }; */
        combo_Z {
            timeout-ms = <30>;
            key-positions = <26 27>;
            bindings = <&kp Z>;
            layers = <DEF>;
        };
        combo_exclamation {
            timeout-ms = <30>;
            key-positions = <20 21>;
            bindings = <&kp EXCLAMATION>;
            layers = <DEF NUM NLK>;
        };
        combo_at {
            timeout-ms = <30>;
            key-positions = <20 21 22>;
            bindings = <&kp AT>;
            layers = <DEF NUM NLK>;
        };
        combo_hash {
            timeout-ms = <30>;
            key-positions = <21 22>;
            bindings = <&kp HASH>;
            layers = <DEF NUM NLK>;
        };
        combo_toDEFLayer {
            timeout-ms = <40>;
            key-positions = <30 31>;
            bindings = <&to DEF>;
            layers = <DEF NUM NLK FUN FLK GUI GLK>;
        };
        combo_numLock {
            timeout-ms = <40>;
            key-positions = <0 10>;
            bindings = <&tog NLK>;
            layers = <NUM NLK>;
        };
        combo_funLock {
            timeout-ms = <40>;
            key-positions = <0 10>;
            bindings = <&tog FLK>;
            layers = <FUN FLK>;
        };
        combo_GMCLock {
            timeout-ms = <40>;
            key-positions = <0 10>;
            bindings = <&tog GLK>;
            layers = <GMC GLK>;
        };
        combo_BTclr {
            timeout-ms = <30>;
            key-positions = <1 11>;
            bindings = <&bt BT_CLR>;
            layers = <GMC GLK>;
        };
        /* combo_BT3 { */
        /*     timeout-ms = <30>; */
        /*     key-positions = <9 19>; */
        /*     bindings = <&bt BT_SEL 2>; */
        /*     layers = <GMC GLK>; */
        /* }; */
    };  // }}}

// ========================= MACROS ========================= {{{1
// Docs say `wait-ms` and `tap-ms` should be at least 30 to avoid
// out-of-order keystrokes.
    macros {
        ZMK_MACRO(firstname,
            wait-ms = <10>;
            tap-ms = <10>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp B>
                , <&macro_release &kp LSHFT>
                , <&macro_tap &kp E &kp N &kp N &kp E &kp T &kp T>
                ;
        )
        ZMK_MACRO(lastname,
            wait-ms = <10>;
            tap-ms = <10>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp H>
                , <&macro_release &kp LSHFT>
                , <&macro_tap &kp E &kp L &kp M>
                ;
        )
        ZMK_MACRO(fullname,
            wait-ms = <15>;
            tap-ms = <5>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp B>
                , <&macro_release &kp LSHFT>
                , <&macro_tap &kp E &kp N &kp N &kp E &kp T &kp T &kp SPACE>
                , <&macro_press &kp LSHFT>
                , <&macro_tap &kp H>
                , <&macro_release &kp LSHFT>
                , <&macro_tap &kp E &kp L &kp M>
                ;
        )
        // Sometimes getting keys out of order on the below with w=10, t=10
        ZMK_MACRO(emphword,
            wait-ms = <30>;
            tap-ms = <5>;
            bindings
                = <&macro_tap &kp ESC>
                , <&macro_wait_time 10>
                , <&macro_tap &kp C &kp I &kp W>
                , <&macro_wait_time 30>
                , <&macro_tap &kp BSLH>
                , <&macro_wait_time 10>
                , <&macro_tap &kp E &kp M &kp P &kp H>
                , <&macro_wait_time 30>
                , <&macro_tap &kp LBRC>
                , <&macro_press &kp LCTRL>
                , <&macro_tap &kp R>
                , <&macro_release &kp LCTRL>
                , <&macro_tap &kp DQT &kp RBRC>
                ;
        )
        ZMK_MACRO(boldword,
            wait-ms = <30>;
            tap-ms = <5>;
            bindings
                = <&macro_tap &kp ESC>
                , <&macro_wait_time 10>
                , <&macro_tap &kp C &kp I &kp W>
                , <&macro_wait_time 30>
                , <&macro_tap &kp BSLH>
                , <&macro_wait_time 10>
                , <&macro_tap &kp T &kp E &kp X &kp T &kp B &kp F>
                , <&macro_wait_time 30>
                , <&macro_tap &kp LBRC>
                , <&macro_press &kp LCTRL>
                , <&macro_tap &kp R>
                , <&macro_release &kp LCTRL>
                , <&macro_tap &kp DQT &kp RBRC>
                ;
        )
        ZMK_MACRO(quoteword,
            wait-ms = <30>;
            tap-ms = <5>;
            bindings
                = <&macro_tap &kp ESC>
                , <&macro_wait_time 10>
                , <&macro_tap &kp C &kp I &kp W>
                , <&macro_wait_time 30>
                , <&macro_tap &kp BSLH>
                , <&macro_wait_time 10>
                , <&macro_tap &kp E &kp N &kp Q &kp U &kp O &kp T &kp E>
                , <&macro_wait_time 30>
                , <&macro_tap &kp LBRC>
                , <&macro_press &kp LCTRL>
                , <&macro_tap &kp R>
                , <&macro_release &kp LCTRL>
                , <&macro_tap &kp DQT &kp RBRC>
                ;
        )
        ZMK_MACRO(smallcap,
            wait-ms = <30>;
            tap-ms = <5>;
            bindings
                = <&macro_tap &kp ESC>
                , <&macro_wait_time 10>
                , <&macro_tap &kp C &kp I &kp W>
                , <&macro_wait_time 30>
                , <&macro_tap &kp BSLH>
                , <&macro_wait_time 10>
                , <&macro_tap &kp T &kp E &kp X &kp T &kp S &kp C>
                , <&macro_wait_time 30>
                , <&macro_tap &kp LBRC>
                , <&macro_press &kp LCTRL>
                , <&macro_tap &kp R>
                , <&macro_release &kp LCTRL>
                , <&macro_tap &kp DQT &kp RBRC>
                ;
        )
        ZMK_MACRO(texfile,
            wait-ms = <30>;
            tap-ms = <5>;
            bindings
                = <&macro_tap &kp ESC &kp COLON>
                , <&macro_wait_time 10>
                , <&macro_tap &kp COLON &kp T &kp E &kp X &kp RETURN>;
        )
        ZMK_MACRO(tabedit,
            wait-ms = <30>;
            tap-ms = <5>;
            bindings
                = <&macro_tap &kp ESC &kp COLON>
                , <&macro_wait_time 10>
                , <&macro_tap &kp T &kp A &kp B &kp E &kp RETURN>;
        )
            ZMK_MACRO(tabtex,
            wait-ms = <30>;
            tap-ms = <5>;
            bindings
                = <&macro_tap &kp ESC &kp COLON>
                , <&macro_wait_time 10>
                , <&macro_tap &kp T &kp A &kp B &kp E &kp RETURN>
                , <&macro_wait_time 30>
                , <&macro_tap &kp COLON>
                , <&macro_wait_time 10>
                , <&macro_tap &kp T &kp E &kp X &kp RETURN>;
        )
};  // }}}

// ======================== KEYMAPS ========================= {{{1
    keymap {
        compatible = "zmk,keymap";
// ---------------------------------------------------- DVORAK -------------------------------------------------- {{{2
        default {
            bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────╮  ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    &kp SQT    &kp COMMA  &kp DOT    &kp P      &kp Y         &kp F      &kp G      &kp C      &kp R      &kp L
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
    LSFT_A     LCTL_O     LALT_E     LGUI_U     &kp I         &kp D      RGUI_H     RALT_T     RCTL_N     RSFT_S
//  &kp A      &kp O      &kp E      &kp U      &kp I         &kp D      &kp H      &kp T      &kp N      &kp S
// ╰──────────┴──────────┴──────────┴──────────┴──────────┤  ├──────────┴──────────┴──────────┴──────────┴──────────╯
               &kp Q      &kp J      &kp K      &kp X         &kp B      &kp M      &kp W      &kp V
//             LCTL_Q     LALT_J     LGUI_K     &kp X         &kp B      RGUI_M     RALT_W     RCTL_V
//            ╰──────────┴──────┬───┴────────┬─┴──────────┤  ├──────────┴──┬───────┴────┬─────┴──────────╯
                                 &lt MAC SEMI &lt NUM BSPC    &lt FUN SPACE &lt GMC FSLH
//                               &lt NUM SEMI LSFT_BSPC       &lt FUN SPACE &lt GMC FSLH
//                              ╰────────────┴────────────╯  ╰─────────────┴────────────╯
            >;
      };  // }}}
//  ---------------------------------------------------- NUMBERS ------------------------------------------------ {{{2
        numbers {
            bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────╮  ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    &kp TAB    &kp AMPS   &kp ASTRK  &kp LA(N6) &none         &kp GRAVE  &kp N7     &kp N8     &kp N9     &kp EQUAL
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
    LSFT_TILDE LCTL_DLLR  LALT_PRCNT LGUI_CARET &kp COMMA     &kp DOT    RGUI_N4    RALT_N5    RCTL_N6    RSFT_MINUS
//  &kp TILDE  &kp DLLR   &kp PRCNT  &kp CARET  &kp GRAVE     &kp DOT    &kp N4     &kp N5     &kp N6     &kp MINUS
// ╰──────────┴──────────┴──────────┴──────────┴──────────┤  ├──────────┴──────────┴──────────┴──────────┴──────────╯
               &kp EXCL   &kp AT     &kp HASH   &kp LA(K)     &kp N0     &kp N1     &kp N2     &kp N3
//             LCTL_EXCL  LALT_AT    LGUI_HASH  &kp LA(K)     &kp N0     RGUI_N1    RALT_N2    RCTL_N3
//            ╰──────────┴──────┬───┴────────┬─┴──────────┤  ├──────────┴──┬───────┴────┬─────┴──────────╯
                                 &trans       &trans          &trans        &kp BSLH
//                              ╰────────────┴────────────╯  ╰─────────────┴────────────╯
            >;
      };  // }}}
//  ------------------------------------------------- NUMBERS LOCK ---------------------------------------------- {{{2
// NOTE: This is exactly the same as NUMBERS
        numbers_lock {
            bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────╮  ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    &kp TAB    &kp AMPS   &kp ASTRK  &kp LA(N6) &none         &kp GRAVE  &kp N7     &kp N8     &kp N9     &kp EQUAL
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
    LSFT_TILDE LCTL_DLLR  LALT_PRCNT LGUI_CARET &kp COMMA     &kp DOT    RGUI_N4    RALT_N5    RCTL_N6    RSFT_MINUS
//  &kp TILDE  &kp DLLR   &kp PRCNT  &kp CARET  &kp GRAVE     &kp DOT    &kp N4     &kp N5     &kp N6     &kp MINUS
// ╰──────────┴──────────┴──────────┴──────────┴──────────┤  ├──────────┴──────────┴──────────┴──────────┴──────────╯
               &kp EXCL   &kp AT     &kp HASH   &kp LA(K)     &kp N0     &kp N1     &kp N2     &kp N3
//             LCTL_EXCL  LALT_AT    LGUI_HASH  &kp LA(K)     &kp N0     RGUI_N1    RALT_N2    RCTL_N3
//            ╰──────────┴──────┬───┴────────┬─┴──────────┤  ├──────────┴──┬───────┴────┬─────┴──────────╯
                                 &trans       &trans          &trans        &kp BSLH
//                              ╰────────────┴────────────╯  ╰─────────────┴────────────╯
            >;
      };  // }}}
// --------------------------------------------------- FUNCTIONS ------------------------------------------------ {{{2
        functions {
            bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────╮  ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    &kp TAB    &kp F7     &kp F8     &kp F9     &kp F12      &kp C_VOL_UP &kp HOME  &kp UP     &kp PG_UP &kp C_BRI_UP
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
    LSFT_AT    LCTRL_F4   LALT_F5    LGUI_F6    &kp F11      &kp C_VOL_DN RGUI_LFT  RALT_DWN   RCTRL_RGT  RSFT_BRD
//  &kp AT     &kp F4     &kp F5     &kp F6     &kp F11      &kp C_VOL_DN &kp LEFT  &kp DOWN   &kp RIGHT &kp C_BRI_DN
// ╰──────────┴──────────┴──────────┴──────────┴──────────┤  ├──────────┴──────────┴──────────┴──────────┴──────────╯
               &kp F1     &kp F2     &kp F3     &kp F10       &kp C_MUTE &kp END    &key_repeat &kp PG_DN
//             LCTRL_F1   LALT_F2    LGUI_F3    &kp F10       &kp C_MUTE RGUI_END   &kp RALT   RCTL_PDN
//            ╰──────────┴──────┬───┴────────┬─┴──────────┤  ├──────────┴──┬───────┴────┬─────┴──────────╯
                                 &trans       &kp LS(BSPC)    &trans        &trans
//                              ╰────────────┴────────────╯  ╰─────────────┴────────────╯
            >;
      };  // }}}
// ------------------------------------------------ FUNCTIONS LOCK ---------------------------------------------- {{{2
// NOTE: This is exactly the same as FUNCTIONS
        functions_lock {
            bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────╮  ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    &kp TAB    &kp F7     &kp F8     &kp F9     &kp F12      &kp C_VOL_UP &kp HOME  &kp UP     &kp PG_UP &kp C_BRI_UP
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
    LSFT_AT    LCTRL_F4   LALT_F5    LGUI_F6    &kp F11      &kp C_VOL_DN RGUI_LFT  RALT_DWN   RCTRL_RGT  RSFT_BRD
//  &kp AT     &kp F4     &kp F5     &kp F6     &kp F11      &kp C_VOL_DN &kp LEFT  &kp DOWN   &kp RIGHT &kp C_BRI_DN
// ╰──────────┴──────────┴──────────┴──────────┴──────────┤  ├──────────┴──────────┴──────────┴──────────┴──────────╯
               &kp F1     &kp F2     &kp F3     &kp F10       &kp C_MUTE &kp END    &key_repeat &kp PG_DN
//             LCTRL_F1   LALT_F2    LGUI_F3    &kp F10       &kp C_MUTE RGUI_END   &kp RALT   RCTL_PDN
//            ╰──────────┴──────┬───┴────────┬─┴──────────┤  ├──────────┴──┬───────┴────┬─────┴──────────╯
                                 &trans       &kp LS(BSPC)    &trans        &trans
//                              ╰────────────┴────────────╯  ╰─────────────┴────────────╯
            >;
      };  // }}}
// --------------------------------------------------- GUI/MISC ------------------------------------------------- {{{2
// |BT<>USB|       |  M Up | Whl Up|  Accl2|     |   F3  | PrvWin| WinBig| NxtWin| BT #1 |
// |       |  M Lft|  M Dn |  M Rgt|  Accl1|     | Sft-F3|  Win3L|  WinSm|  Win3R| BT #2 |
// |  SHFT |  CTRL |       | Whl Dn|  Accl0|     | Cmd-F3| WinLft| WinCen| WinRgt| BT #3 |
//                                 | LftBtn|     | RgtBtn|  ---- |
//
        gui_misc {
            bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────╮  ╭──────────┬──────────┬──────────┬──────────┬──────────╮
   &out OUT_TOG &none     &none      &none      &none         &kp F3     WIN_PRV    WIN_BIG    WIN_NXT   &bt BT_SEL 0
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp CAPS   &kp LCTRL  &kp LALT   &kp LGUI   &none         &kp LS(F3) CD_WIN3LFT A_WIN_SML  CL_WIN3RGT &bt BT_SEL 1
//  &kp LSHIFT &none      &none      &none      &none         &kp LS(F3) WIN3LFT    WIN_SML    WIN3RGT   &bt BT_SEL 1
// ╰──────────┴──────────┴──────────┴──────────┴──────────┤  ├──────────┴──────────┴──────────┴──────────┴──────────╯
               &caps_word &none      &none      &none         &kp LG(F3) WIN_LFT    WIN_CNT    WIN_RGT
//             &kp LCTRL  &kp LALT   &kp LGUI   &none         &kp LG(F3) CD_WIN_LFT A_WIN_CNT  CL_WIN_RGT
//            ╰──────────┴──────┬───┴────────┬─┴──────────┤  ├──────────┴──┬───────┴────┬─────┴──────────╯
                                 &trans       &trans          &trans        &trans
//                              ╰────────────┴────────────╯  ╰─────────────┴────────────╯
             >;
      };  // }}}
// ------------------------------------------------ GUI/MISC LOCK ----------------------------------------------- {{{2
// |BT<>USB|       |  M Up | Whl Up|  Accl2|     |   F3  | PrvWin| WinBig| NxtWin| BT #1 |
// |       |  M Lft|  M Dn |  M Rgt|  Accl1|     | Sft-F3|  Win3L|  WinSm|  Win3R| BT #2 |
// |  SHFT |  CTRL |       | Whl Dn|  Accl0|     | Cmd-F3| WinLft| WinCen| WinRgt| BT #3 |
//                                 | LftBtn|     | RgtBtn|  ---- |
//
// NOTE: This is exactly the same as GUI/MISC
        gui_misc_lock {
            bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────╮  ╭──────────┬──────────┬──────────┬──────────┬──────────╮
   &out OUT_TOG &none     &none      &none      &none         &kp F3     WIN_PRV    WIN_BIG    WIN_NXT   &bt BT_SEL 0
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &kp CAPS   &kp LCTRL  &kp LALT   &kp LGUI   &none         &kp LS(F3) CD_WIN3LFT A_WIN_SML  CL_WIN3RGT &bt BT_SEL 1
//  &kp LSHIFT &none      &none      &none      &none         &kp LS(F3) WIN3LFT    WIN_SML    WIN3RGT   &bt BT_SEL 1
// ╰──────────┴──────────┴──────────┴──────────┴──────────┤  ├──────────┴──────────┴──────────┴──────────┴──────────╯
               &caps_word &none      &none      &none         &kp LG(F3) WIN_LFT    WIN_CNT    WIN_RGT
//             &kp LCTRL  &kp LALT   &kp LGUI   &none         &kp LG(F3) CD_WIN_LFT A_WIN_CNT  CL_WIN_RGT
//            ╰──────────┴──────┬───┴────────┬─┴──────────┤  ├──────────┴──┬───────┴────┬─────┴──────────╯
                                 &trans       &trans          &trans        &trans
//                              ╰────────────┴────────────╯  ╰─────────────┴────────────╯
             >;
      }; // }}}
// ---------------------------------------------------- MACROS -------------------------------------------------- {{{2
        macros {
            bindings = <
// ╭──────────┬──────────┬──────────┬──────────┬──────────╮  ╭──────────┬──────────┬──────────┬──────────┬──────────╮
    &quoteword &none      &none      &none      &none         &none      &none      &none      &none      &none
// ├──────────┼──────────┼──────────┼──────────┼──────────┤  ├──────────┼──────────┼──────────┼──────────┼──────────┤
    &none      &none      &emphword  &none      &none         &none      &none      &tdtextab  &tdname    &smallcap
// ╰──────────┴──────────┴──────────┴──────────┴──────────┤  ├──────────┴──────────┴──────────┴──────────┴──────────╯
               &none      &none      &none      &none         &boldword  &none      &none      &none
//            ╰──────────┴──────┬───┴────────┬─┴──────────┤  ├──────────┴──┬───────┴────┬─────┴──────────╯
                                 &none        &none           &none         &none
//                              ╰────────────┴────────────╯  ╰─────────────┴────────────╯
            >;
      };  // }}}
  };  // keymap }}}
};

// vim: fdm=marker ft=c
